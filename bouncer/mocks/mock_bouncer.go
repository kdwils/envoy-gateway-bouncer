// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kdwils/envoy-gateway-bouncer/bouncer (interfaces: LiveBouncerClient)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_bouncer.go -package=mocks github.com/kdwils/envoy-gateway-bouncer/bouncer LiveBouncerClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/crowdsecurity/crowdsec/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockLiveBouncerClient is a mock of LiveBouncerClient interface.
type MockLiveBouncerClient struct {
	ctrl     *gomock.Controller
	recorder *MockLiveBouncerClientMockRecorder
	isgomock struct{}
}

// MockLiveBouncerClientMockRecorder is the mock recorder for MockLiveBouncerClient.
type MockLiveBouncerClientMockRecorder struct {
	mock *MockLiveBouncerClient
}

// NewMockLiveBouncerClient creates a new mock instance.
func NewMockLiveBouncerClient(ctrl *gomock.Controller) *MockLiveBouncerClient {
	mock := &MockLiveBouncerClient{ctrl: ctrl}
	mock.recorder = &MockLiveBouncerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLiveBouncerClient) EXPECT() *MockLiveBouncerClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockLiveBouncerClient) Get(arg0 string) (*models.GetDecisionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*models.GetDecisionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLiveBouncerClientMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLiveBouncerClient)(nil).Get), arg0)
}

// Init mocks base method.
func (m *MockLiveBouncerClient) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockLiveBouncerClientMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockLiveBouncerClient)(nil).Init))
}
